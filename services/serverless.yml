service: aws-portal26-assignment
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x
  profile: abehera-dev
  region: ap-south-1
  stage: ${opt:stage, "dev"}
  environment:
    REGION: ${self:provider.region}
    EVENT_TABLE: events

plugins:
  - serverless-iam-roles-per-function
  - serverless-offline

functions:
  WebhookEventsProcessor:
    handler: WebhookEventsProcessor.handler
    description: Process webhook events data
    name: ${self:service}-${self:provider.stage}-WebhookEventsProcessor
    events:
      - http:
          path: v1/webhooks/{tenant}/events
          method: post
          request:
            parameters:
              paths:
                tenant: true
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-WebhookEventsProcessor-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/events
  WebhookEventsRetrieve:
    handler: WebhookEventsRetrieve.handler
    description: Retrieve webhook events data
    name: ${self:service}-${self:provider.stage}-WebhookEventsRetrieve
    events:
      - http:
          path: v1/{tenant}/query
          method: GET
          request:
            parameters:
              querystrings:
                from_date: false
                to_date: false
                user_id: false
                url: false
                category: false
              paths:
                tenant: true
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-WebhookEventsRetrieve-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/events
          - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/events/index/*

resources:
  Resources:
    EventsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: "tenant"
            AttributeType: "S"
          - AttributeName: "event_timestamp"
            AttributeType: "S"
          - AttributeName: "user_id"
            AttributeType: "S"
          - AttributeName: "url"
            AttributeType: "S"
          - AttributeName: "category"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "tenant"
            KeyType: "HASH"
          - AttributeName: "event_timestamp"
            KeyType: "RANGE"
        LocalSecondaryIndexes:
          - IndexName: "events_userid"
            KeySchema:
              - AttributeName: "tenant"
                KeyType: "HASH"
              - AttributeName: "user_id"
                KeyType: "RANGE"
            Projection:
              ProjectionType: ALL
          - IndexName: "events_url"
            KeySchema:
              - AttributeName: "tenant"
                KeyType: "HASH"
              - AttributeName: "url"
                KeyType: "RANGE"
            Projection:
              ProjectionType: ALL
          - IndexName: "events_category"
            KeySchema:
              - AttributeName: "tenant"
                KeyType: "HASH"
              - AttributeName: "category"
                KeyType: "RANGE"
            Projection:
              ProjectionType: ALL
        TableName: "events"
